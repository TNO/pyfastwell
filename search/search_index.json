{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pyfastwell-documentation","title":"pyfastwell Documentation","text":"<p>Welcome to the pyfastwell documentation!</p> <p>This project provides tools for Analytical Element Model well performance calculations for advanced well architectures (e.g. multi-laterals, horizontal wells, steel shot drilling, fish bones etc), coldfront tracking in the reservoir, geothermal doublet techno-economic performance, including well flow results, coldfront evolution, and thermal performance.</p> <p>pyfastwell can complement DoubletCalc1D. DoubletCalc1D is a probabilistic doublet technical performance assessment tool developed by TNO that calculates how much geothermal water can be pumped at a given pump power, for a simple well architecture (van Wees et al., 2012),  and served to develop geothermal energy potential in the Netherlands (Mijnlieff, 2020; Mijnlieff et al., 2025). It takes into account well engineering aspects and specific subsurface conditions, including aquifer temperature, and reservoir flow properties.  The software and manual can be downloaded from Doubletcalc1D.</p>"},{"location":"#theory","title":"Theory","text":"<p>For the theoretical background, see the Theory introduction </p>"},{"location":"#modules-and-api-reference","title":"Modules and Api reference","text":"<p>Explore the API documentation for each module </p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started, see the README or browse the API reference above.</p>"},{"location":"#usage","title":"Usage","text":"<p>For the way to use pyfastwell, see the Usage section  and examples in  examples section.</p>"},{"location":"#development-notes","title":"Development notes","text":"<p>Notes on the development including assumptions and limitations are mentioned in DevelopmentNotes.</p>"},{"location":"api/","title":"API Reference Index","text":"<ul> <li>Coldfront</li> <li>Stochasticmodel</li> <li>WellFastModel</li> <li>WiTNO</li> <li>get_random_value_double_triangular</li> <li>plot_wells</li> </ul>"},{"location":"api/plot/plot_wells/","title":"plot_wells API Reference","text":""},{"location":"api/plot/plot_wells/#pyfastwell.plot.plotwells.plot_wells","title":"pyfastwell.plot.plotwells.plot_wells","text":"<pre><code>plot_wells(wells, filename_noext='well')\n</code></pre> <p>plot the well trees in 3D and 2D projections :param wells: list of WellTreeTNO objects or a single WellTreeTNO object :param filename_noext: name of the file to save the plot</p>"},{"location":"api/stochastic/Stochasticmodel/","title":"Stochasticmodel API Reference","text":""},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel","title":"pyfastwell.stochastic.stochasticmodel.Stochasticmodel","text":"<p>               Bases: <code>object</code></p> <p>Stochastic model for parameter sampling and forward modeling.</p> <p>This class manages model parameters, samples them according to specified distributions, and applies them to a forward model for ensemble simulations.</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel--notes","title":"Notes","text":"<ul> <li>Locked parameters remain constant across the ensemble.</li> <li>Free parameters are sampled according to their specified distributions.</li> <li>The class supports normal, uniform, and triangular distributions for sampling.</li> </ul>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.__init__","title":"__init__","text":"<pre><code>__init__(argdict: Optional[Dict[str, Any]] = None) -&gt; None\n</code></pre> <p>Initialize the Stochasticmodel object.</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.__init__--parameters","title":"Parameters:","text":"<p>argdict: dictionary with keys 'locked', 'free_param', and 'free dist' containing the model parameters</p> <p>Notes</p> <p>The model parameters are subdivided in 'locked' parameters, which typically include the time array for which simulation is performed and additional 'locked' parameters which are not variable for the ensemble. The 'free_parameters' contains a list of parameter names which are allowed to vary and are sampled for the Stochasticmodel corresponding to the 'free_dist' distribition specifications</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.get_from_dict","title":"get_from_dict","text":"<pre><code>get_from_dict(name: str, param: ndarray) -&gt; Any\n</code></pre> <p>Get a parameter from the dictionary based on its name, either from 'locked' or 'free_param' If the name is not found in 'free_param', it will look in 'locked'. If the name is not found in either, it will raise an exception. This method is used to retrieve the parameter values for the ensemble realisations.</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.get_from_dict--parameters","title":"Parameters","text":"<p>name: name of the parameter to be retrieved from the dictionary (either 'locked' or 'free_param'), 'free_param' takes prevalence</p> <p>param: ensembles realisation corresponding to 'free_param' sampled values</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.get_from_dict--returns","title":"Returns","text":"<p>value of the parameter corresponding to the name, either from 'locked' or from 'free_param'</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.getmedianparams","title":"getmedianparams","text":"<pre><code>getmedianparams() -&gt; np.ndarray\n</code></pre> <p>Get the median values of the free parameters</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.getmedianparams--returns","title":"Returns","text":"<p>median values of the free parameters in one dimensional array</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.generate_ensemble","title":"generate_ensemble","text":"<pre><code>generate_ensemble(nsamples: Optional[int] = None) -&gt; List[np.ndarray]\n</code></pre> <p>Generate an ensemble of model parameters based on the distribution specifications in the dictionary</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.generate_ensemble--parameters","title":"Parameters","text":"<p>nsamples: number of samples to generate</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.generate_ensemble--returns","title":"Returns","text":"<p>list of parameter arrays (dimension equal to number of free parameters), list size equal to nsamples</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.run_ensemble","title":"run_ensemble","text":"<pre><code>run_ensemble(m: List[ndarray], forward: Callable[[ndarray], Any]) -&gt; List[np.ndarray]\n</code></pre> <p>Run the forward model for the ensemble of parameters</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.run_ensemble--parameters","title":"Parameters","text":"<p>m: ensemble of parameters, corresponding to the free parameters and created by generate_ensemble forward: forward model function</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.run_ensemble--returns","title":"Returns","text":"<p>results of the forward model for the ensemble</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.plot_distribution","title":"plot_distribution","text":"<pre><code>plot_distribution(results: ndarray, name: str)\n</code></pre> <p>Plot the distribution of a parameter forward model results</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.plot_distribution--parameters","title":"Parameters:","text":"<p>results: results of the forward model for the ensemble ndarray</p> <p>name: name of the plot</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.plot_distribution--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.expectation_plot","title":"expectation_plot","text":"<pre><code>expectation_plot(results: ndarray, name: str, percent: bool = True, expectation: bool = True, pvals: Optional[List[float]] = None) -&gt; None\n</code></pre> <p>Plot the expectation of a parameter forward model results</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.expectation_plot--parameters","title":"Parameters","text":"<p>results: results of the forward model for the ensemble ndarray</p> <p>name: name of the plot</p> <p>percent: if True, the y-axis is in percent, otherwise in fraction</p> <p>expectation: if True, the y-axis is reversed interpreting the results as expectation</p> <p>pvals: pvalues to be plotted (list)</p>"},{"location":"api/stochastic/Stochasticmodel/#pyfastwell.stochastic.stochasticmodel.Stochasticmodel.expectation_plot--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/stochastic/get_random_value_double_triangular/","title":"get_random_value_double_triangular API Reference","text":""},{"location":"api/stochastic/get_random_value_double_triangular/#pyfastwell.stochastic.stochasticmodel.get_random_value_double_triangular","title":"pyfastwell.stochastic.stochasticmodel.get_random_value_double_triangular","text":"<pre><code>get_random_value_double_triangular(minimum: float, maximum: float, most_likely: float) -&gt; float\n</code></pre> <p>Calculate random value using a double-triangular distribution</p>"},{"location":"api/stochastic/get_random_value_double_triangular/#pyfastwell.stochastic.stochasticmodel.get_random_value_double_triangular--parameters","title":"Parameters","text":"<p>minumum: Minimum value</p> <p>maximum: Maximum value</p> <p>most_likely: Most    likely value</p>"},{"location":"api/stochastic/get_random_value_double_triangular/#pyfastwell.stochastic.stochasticmodel.get_random_value_double_triangular--returns","title":"Returns","text":"<p>Random value between min and max</p>"},{"location":"api/wellflow/Coldfront/","title":"Coldfront API Reference","text":""},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront","title":"pyfastwell.wellflow.coldfront.Coldfront","text":""},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.__init__","title":"__init__","text":"<pre><code>__init__(wellres: wi_tno, flowrate: float, tres: float, tinj: float, salinity: float, rockdens: float = 2700, rockcap: float = 1000, porosity: float = 0.21, simyears: int = 30, maxlength: float = 20, polwidth: float = 60, gridrange: float = 2000, ncell: int = 200, loadhours: int = 8760, verbose: bool = False)\n</code></pre> <p>Simulates the cold front propagation in a reservoir flow grid.</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.__init__--parameters","title":"Parameters","text":"<p>wellres :   Well and reservoir model.</p> <p>flowrate : Flow rate in m\u00b3/h.</p> <p>tres : Reservoir temperature in K.</p> <p>tinj :  Injected water temperature in K.</p> <p>salinity : Salinity of injected water in ppm.</p> <p>rockdens :  Rock density in kg/m\u00b3.</p> <p>rockcap :   Rock heat capacity in J/(kg\u00b7K).</p> <p>porosity :    Rock porosity (fraction).</p> <p>simyears :    Number of simulation years.</p> <p>maxlength :    Max polygon edge length in m.</p> <p>polwidth :     Polygon width around well in m.</p> <p>gridrange :  Grid range around bounding box of injectors at reservoir level in m.</p> <p>ncell :  Number of grid cells in x and y for flow grid.</p> <p>loadhours :    Annual operating hours.</p> <p>verbose :  Print additional info.</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.plot_coldfront","title":"plot_coldfront","text":"<pre><code>plot_coldfront(filename_noext: str = None, title: str = None) -&gt; None\n</code></pre> <p>Plot the cold front of injected water in the flow grid.</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.plot_coldfront--parameters","title":"Parameters","text":"<p>filename_noext :  If provided, saves the plot to this filename (without extension), otherwise displays it.</p> <p>title : Title for the plot. If None, a default title is used.</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.plot_coldfront--returns","title":"Returns","text":"<p>None</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.getwellQ","title":"getwellQ","text":"<pre><code>getwellQ() -&gt; float\n</code></pre> <p>Calculate the total flowrate of the wells in m\u00b3/s.</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.getwellQ--returns","title":"Returns","text":"<p>Total flowrate of the wells in m\u00b3/s.</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.setSources","title":"setSources","text":"<pre><code>setSources() -&gt; list\n</code></pre> <p>Generate a list of source points for the reservoir flow model.</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.setSources--returns","title":"Returns","text":"<p>list of tuples, each tuple contains (x, y, strength) for a source point.</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.get_perforation_lines","title":"get_perforation_lines","text":"<pre><code>get_perforation_lines(inj: bool = True) -&gt; list\n</code></pre> <p>Get perforation line segments for injectors or producers.</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.get_perforation_lines--parameters","title":"Parameters","text":"<p>inj : If True, return injector lines; if False, return producer lines.</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.get_perforation_lines--returns","title":"Returns","text":"<p>list of tuple, Each tuple contains (x0, y0, x1, y1) coordinates for a perforation line.</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.get_inj_polygons","title":"get_inj_polygons","text":"<pre><code>get_inj_polygons(polwidth=60, max_length=5)\n</code></pre> <p>Generate polygons around injector well segments.</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.get_inj_polygons--parameters","title":"Parameters","text":"<p>polwidth : Width of the polygon around each injector line (default: 60). max_length : Maximum edge length for polygon subdivision (default: 5).</p>"},{"location":"api/wellflow/Coldfront/#pyfastwell.wellflow.coldfront.Coldfront.get_inj_polygons--returns","title":"Returns","text":"<p>shapely.geometry.Polygon or MultiPolygon, Unified polygon(s) representing injector regions.</p>"},{"location":"api/wellflow/WellFastModel/","title":"WellFastModel API Reference","text":""},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel","title":"pyfastwell.wellflow.well_fastmodel.WellFastModel","text":""},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.skin_from_deviation","title":"skin_from_deviation  <code>staticmethod</code>","text":"<pre><code>skin_from_deviation(H: float, rw: float, khkv: float, deviation: float, type: str = 'rogers') -&gt; float\n</code></pre> <p>calculate the skin factor from the deviation of the well from vertical, it is valid for deviations from 10 up to 75 degrees</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.skin_from_deviation--parameters","title":"Parameters","text":"<p>H:  vertical thickness of the reservoir in m</p> <p>rw: well radius in m</p> <p>khkv: ratio of kH to kV</p> <p>deviation: deviation from vertical in degrees</p> <p>type: type of correlation to use, options are \"rogers\", \"abobaker\", \"cinco\", \"besson\"</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.skin_from_deviation--returns","title":"Returns","text":"<p>skin factor (dimensionless)</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.skin_from_deviation--notes","title":"Notes","text":"<p>references:</p> <ol> <li>Abobaker, A., Al-Khulaifi, Y., Al-Menhali, A. S., &amp; Al-Menhali, M. (2021). A New Correlation for Estimating the Productivity Index of Deviated Geothermal Wells. Energies, 14(17), 5585. https://doi.org/10.3390/en14175585</li> <li>CH. Cinco, F.G. Miller, H.J. Ramey Jr., 1975. Unsteady-state pressure distribution created by a directionally drilled well. J. Petrol. Technol., 27 (11) (1975), pp. 1-392</li> <li>E.J. Rogers, M.J. Economides, 1996.  The skin due to slant of deviated wells in permeability-anisotropic reservoirs International Conference on Horizontal Well Technology, Society of Petroleum Engineers</li> <li>Besson H., 1990. Performance of slanted and horizontal wells on an anisotropic medium. European Petroleum Conference, Society of Petroleum Engineers (1990)</li> <li>Hassan et al., 2021  https://www.sciencedirect.com/science/article/pii/S0920410520308317</li> </ol>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.pi_dc1d","title":"pi_dc1d  <code>staticmethod</code>","text":"<pre><code>pi_dc1d(L: float, rw: float, kH: float, mu: float, skin: float) -&gt; float\n</code></pre> <p>calculate the productivity index of a vertical well (flow rate [m3/s] for 1 bar pressure difference) in a reservoir with constant thickness (H) and permeability (k) and distance</p> <p>:param L:  distance between the wells in m :param rw: well radius in m :param kH: permeability times thickness in mDm :param mu: viscosity in Pas :param skin: skin factor (dimensionless) :return: productivity index in m3/s/bar</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.__init__","title":"__init__","text":"<pre><code>__init__(economics: GeothermalEconomics, k: float = 100.0, khkv: float = 1.0, segmentlength: float = 50.0, verbose: Optional[bool] = False) -&gt; None\n</code></pre> <p>Initialize the WellFastModel with the given economics and settings. This model computes the well flow and economics based on the provided parameters. It will always create a deep copy of the well trees to avoid modifying the original well trees in the economics instance. it will also modify the production temperature based on actual temperatures in the well tree if available.</p> <p>For the thickness of the reservoir, it will use the top and bottom reservoir depth from the INJ1 well.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.__init__--parameters","title":"Parameters:","text":"<p>economics :  An instance of GeothermalEconomics containing the well trajectory and simulation results</p> <p>economics_settingfile :  settings file name for the economics model</p> <p>k : Horizontal permeability in mD</p> <p>khkv : Ratio of kH to kv</p> <p>segmentlength : Segment length in meters for the WiTNO model</p> <p>verbose :  If True, prints additional information during computation</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.set_dP_BHP","title":"set_dP_BHP","text":"<pre><code>set_dP_BHP(dp_BHP: float)\n</code></pre> <p>Set the pressure difference (dP) for the well model, and updates the flow rate accordingly. The pressure difference is the difference between the bottom hole pressure (BHP) of the producer and the injector well.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.set_dP_BHP--parameters","title":"Parameters:","text":"<p>dp_BHP : Pressure difference in bar, which is the difference between the bottom hole pressure (BHP) of the producer and the injector well.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.set_dP_BHP--notes","title":"Notes:","text":"<p>raises ValueError if dp_BHP is not a positive value.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.get_BHPs","title":"get_BHPs","text":"<pre><code>get_BHPs()\n</code></pre> <p>get the injector and producer well BHP</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.get_BHPs--returns","title":"Returns","text":"<pre><code>BHPs [injector, producer] in bar\n</code></pre>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.set_flowrate","title":"set_flowrate","text":"<pre><code>set_flowrate(flowrate: float)\n</code></pre> <p>Set the flow rate for the well model, and updates the simulation results accordingly, including the actual productivity and injectivity indices</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.set_flowrate--parameters","title":"Parameters","text":"<p>flowrate : Flow rate in m3/h</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.set_flowrate--notes","title":"Notes","text":"<p>Raises ValueError if flowrate is not a positive value. This method also updates the economics configuration with the new flow rate and recalculates the simulation results. The bottom hole pressure (BHP) for both the injector and producer wells is calculated based on the flow rate and the injectivity/productivity indices.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.set_k_khkv","title":"set_k_khkv","text":"<pre><code>set_k_khkv(k: float, khkv: float, tryscale: bool = True)\n</code></pre> <p>Set the permeability and khkv for the well model. this will also update the WiTNO instance. It is couputationally expensive to set the permeability and khkv, so it should be done only when necessary, unless tryscale is True. If tryscale is True, it will scale the injectivity and productivity indices only if khkv is not altered.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.set_k_khkv--parameters","title":"Parameters:","text":"<p>k:  Permeability in mD</p> <p>khkv: ratio of kH to kv</p> <p>tryscale: If True, it will simply scale the II and PI,  if khkv is not altered</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.getSkinFactors_dc1d","title":"getSkinFactors_dc1d","text":"<pre><code>getSkinFactors_dc1d(L: float, rw: float) -&gt; Tuple[float, float]\n</code></pre> <p>Get the skin factors for the injector and producer wells for use in DC1D based on the current well model. This method will use the WiTNO instance to calculate the skin factors for both wells. It will be consistent with the well distance (L) and well radius (rw), as to be used in the DC1D model.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.getSkinFactors_dc1d--parameters","title":"Parameters:","text":"<p>L : Distance between the wells in meters rw : Well radius in meters</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.getSkinFactors_dc1d--returns","title":"Returns:","text":"<p>A tuple containing the skin factors for the injector and producer wells (skin_inj, skin_prod) and the ratio of actual II and II for a vertical injector well.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.getSkinFactors_dc1d--notes","title":"Notes:","text":"<p>The skin factor is a dimensionless number that represents the effect of near-wellbore conditions on the flow of fluid into or out of a well. A positive skin factor indicates a reduction in flow efficiency, while a negative skin factor indicates an enhancement in flow efficiency. The skin factors are calculated based on the current flow rate and the well model.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.compute_economics","title":"compute_economics","text":"<pre><code>compute_economics()\n</code></pre> <p>Compute the economics of the well model using the configured parameters. This method will use the actual simulation results (which can be actualized by set_flowrate) and other parameters to calculate the NPV, LCOE, cash flow, simdata, wells, wellresults, COP, power, surface production temperature, DT_effective, and DP_loop.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.compute_economics--returns","title":"Returns:","text":"<p>A tuple containing NPV [EUR], LCOE [EUR/kWh], cash flow [pd.dataframe], simdata, wells, wellresults, COP[-], power [MW], surface production temperature [C], DT_effective [C], DP_loop [bar]</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.compute_economics--notes","title":"Notes:","text":"<p>This method will print the NPV, LCOE, COP, and power output if verbose is set to True. The NPV is the net present value of the project, LCOE is the levelized cost of heat, COP is the coefficient of performance, and power is the power output in MW. The cash flow is also returned, which is the cash flow pandas dataframe of the project over the simulation period. :raises RuntimeError: If the economics model has not been set up correctly or if the simulation results are not available.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.plot_trajectories","title":"plot_trajectories","text":"<pre><code>plot_trajectories(outdir: Optional[str] = None)\n</code></pre> <p>Plot the well trajectory and save it to a file if specified. This method will plot the well trajectories in 3D and 2D projections.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.plot_trajectories--parameters","title":"Parameters:","text":"<p>outdir : If provided, the plot will be saved to the trajectory file base name in the specified outdir. Provide \"\" to save to the default directory.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.run_coldfront","title":"run_coldfront","text":"<pre><code>run_coldfront(simyears: float, rockdens: float = 2700.0, rockcap: float = 1000.0, porosity: float = 0.21, loadhours=8760, maxlength: float = 20, gridrange: float = 2000, ncell: int = 200) -&gt; Coldfront\n</code></pre> <p>Run the cold front model for the well model. This method will create a Coldfront instance and run the cold front model for the specified number of years. The cold front model will use the well  injection temperature, salinity, rock density, rock heat capacity, porosity, and flow rate to calculate the cold front propagation in the reservoir. It does not take into thermal diffusivity in the reservoir and over and underburden layers.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.run_coldfront--parameters","title":"Parameters","text":"<p>simyears : Number of years to run the cold front model</p> <p>rockdens : Rock density in kg/m3</p> <p>rockcap : Rock heat capacity in J/(kg*K)</p> <p>porosity : Porosity of the rock</p> <p>loadhours : load hours</p> <p>maxlength : Maximum length of the cold front in meters</p> <p>gridrange : Range of the grid for the cold front model in meters</p> <p>ncell : Number of cells for the flow grid in the cold front model (in x and y direction)</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.run_coldfront--returns","title":"Returns:","text":"<p>None</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.plot_coldfront","title":"plot_coldfront","text":"<pre><code>plot_coldfront(outdir: Optional[str] = None, title: Optional[str] = None)\n</code></pre> <p>Plot the perforated section of the wells and cold front and save it to a file if specified.</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.plot_coldfront--parameters","title":"Parameters","text":"<p>outdir :  if provided, the plot will be saved to this directory.</p> <p>title :  if provided, the plot title, otherwise automatically generated</p>"},{"location":"api/wellflow/WellFastModel/#pyfastwell.wellflow.well_fastmodel.WellFastModel.plot_coldfront--notes","title":"Notes:","text":"<p>raises RuntimeError: If the cold front model has not been run yet.</p>"},{"location":"api/wellflow/WiTNO/","title":"WiTNO API Reference","text":""},{"location":"api/wellflow/WiTNO/#pyfastwell.wellflow.wi_tno.WiTNO","title":"pyfastwell.wellflow.wi_tno.WiTNO","text":"<p>well index calculation object</p>"},{"location":"api/wellflow/WiTNO/#pyfastwell.wellflow.wi_tno.WiTNO.__init__","title":"__init__","text":"<pre><code>__init__(inj: WellTreeTNO, prod: WellTreeTNO, ztop, zbottom, kx, ky, kz, muinj=0.001, muprod=0.001, restrictbranch=None, segmentlength=100, verbose=False)\n</code></pre> <p>\" initialize the well index calculation object</p>"},{"location":"api/wellflow/WiTNO/#pyfastwell.wellflow.wi_tno.WiTNO.__init__--parameters","title":"Parameters:","text":"<p>inj: WellTree model of the injection well</p> <p>prod: WellTree model of the production well</p> <p>ztop: perforated top of the reservoir [m] (minus sign for values below surface)</p> <p>zbottom: perforated bottom of the reservoir [m] (minus sign for values below surface)</p> <p>kx: horizontal permeability [mDarcy]</p> <p>ky: horizontal permeability [mDarcy]</p> <p>kz: vertical peremeability [mDarcy]</p> <p>muinj:  viscosity of brine  at injector [Pa s]</p> <p>muprod:  viscosity of brine at producer [Pa s]</p> <p>restrictbranch: restrict the active wells in the well Tree model to this name</p> <p>segmentlength: coarsening target for the perforated part of the reservoir (will not refine)</p> <p>verbose: if True, print debug information</p>"},{"location":"api/wellflow/WiTNO/#pyfastwell.wellflow.wi_tno.WiTNO.setupmatrix_new","title":"setupmatrix_new","text":"<pre><code>setupmatrix_new(n: int = 0, refPprod: float = 100000.0, verbose: bool = False) -&gt; tuple\n</code></pre> <p>setup the matrix for the well index calculation, using the control points</p>"},{"location":"api/wellflow/WiTNO/#pyfastwell.wellflow.wi_tno.WiTNO.setupmatrix_new--parameters","title":"Parameters:","text":"<p>n: order of the polynomial representation of the pressure, 0 is constant, 1 is linear, 2 is quadratic</p> <p>refPprod: reference pressure [Pa] for injectivity and productivity calculation</p> <p>doprint: if True, print the matrix and the right hand side vector</p>"},{"location":"api/wellflow/WiTNO/#pyfastwell.wellflow.wi_tno.WiTNO.setupmatrix_new--returns","title":"Returns","text":"<p>tuple of:</p> <ul> <li> <p>flowrates of the pressure solution in m3/s for each of the AE segments,  positive values are injection, negative production</p> </li> <li> <p>the injection index and the production index (the flow rate in m3/s at the injector and producer for the given reference pressure)</p> </li> </ul>"},{"location":"development_notes/LimitationsAndAssumptions/","title":"Limitations and Assumptions","text":"<p>This tool is under active development. </p> <p>If you have specific requirements or would like to contribute, please open an issue or pull request on the project repository!</p>"},{"location":"theory/coldfront/","title":"coldfront tracking in the reservoir, based on finite difference solution","text":""},{"location":"theory/coldfront/#introduction","title":"introduction","text":"<p>pyfastwell allows to trace the coldfront evolution in the reservoir, based on a finite difference solution.</p> <p>It traces the coldfront in 2D, using as input the inflow and outflow calculated by the AEM model, reservoir properties, and thermal properties of the fluid.</p> <p>It does not take into account thermal diffusion</p> <p>It allows to visually inspect the coldfront evolution in the reservoir</p> <p>The coldfront tracking is implemented in the <code>ColdFront</code> class in the <code>pyfastwell.coldfront</code> module.</p> <p>The coldfront tracking is based on a finite difference solution, using a grid in the reservoir. The coldfront tracking is based on the following assumptions: - The reservoir is homogeneous and isotropic - The flow is steady state - The coldfront is sharp - The coldfront is tracked in 2D</p>"},{"location":"theory/coldfront/#cold-front-tracking-for-a-vertical-well-doublet","title":"Cold Front tracking for a vertical well doublet","text":"<p>An example of a coldfront tracking for a vertical well doublet is shown in the figure below. Its is based on the benchmark case described in the AEM benchmark section.</p> <p> FIGURE 1: Coldfront evolution in the reservoir for a vertical well doublet. The coldfront is tracked in 2D, using a grid in the reservoir. The coldfront is shown at different time steps, from 0 to 20 years. The coldfront is sharp, and the temperature is constant behind the coldfront. The coldfront is tracked in 2D, using a grid in the reservoir.  The coldfront is sharp, and the temperature is constant behind the coldfront.  This figure can be reproduced with the corresponding unittest in test_fastmodel.py for the welltrajectory input from inputXYZvertical.yml</p>"},{"location":"theory/coldfront/#cold-front-tracking-for-a-multi-lateral-well-doublet","title":"Cold Front tracking for a multi-lateral well doublet","text":"<p>An example of a coldfront tracking for a multi-lateral well doublet is shown in the figure below.</p> <p> FIGURE 2: Coldfront evolution in the reservoir for a multi-lateral well doublet with 3 legs. The coldfront is tracked in 2D, using a grid in the reservoir. The coldfront is sharp, and the temperature is constant behind the coldfront.  This figure can be reproduced with the corresponding unittest in test_fastmodel.py for the well trajectory input from inputsMultilateral3legsDetailed.yml</p>"},{"location":"theory/coldfront/#cold-front-tracking-for-horizontal-well-doublet","title":"Cold Front tracking for horizontal well doublet","text":"<p>An example of a coldfront tracking for a horizontal well doublet is shown in the figure below.</p> <p> FIGURE 2: Coldfront evolution in the reservoir for a multi-lateral well doublet with 3 legs. The coldfront is tracked in 2D, using a grid in the reservoir. The coldfront is sharp, and the temperature is constant behind the coldfront.  This figure can be reproduced with the corresponding unittest in test_fastmodel.py for the well trajectory input from inputsMultilateral3legsDetailed.yml</p>"},{"location":"theory/introduction/","title":"pywellfast calculation methods","text":""},{"location":"theory/introduction/#introduction","title":"introduction","text":"<p>pyfastwell is dependent on two python libraries developed by TNO: pythermonomics, and pywellgeo, which do the techno-economic calculations, and defined the well architectures respectively.</p> <p>pyfastwell is an extension of  these packages. It includes: - Analytical Element Method (AEM) (Fokker et al., 2005, Egberts et al., 2013) to calculate the well flow performance of advanced well architectures for homogeneous reservoir properties - coldfront tracking in the reservoir, based on finite difference solution - effects of brine properties (heat capacity, viscosity, density) on well flow performance - wellbore heat losses, frictional losses and thermosiphon effects  - geothermal doublet techno-economic performance, including well flow results, coldfront evolution, and thermal performance - evaluation of Skin effects to be adopted in doubletCalc1D to obtain similar results</p> <p>pywelllfast has been  benchmarked against semi-analytical (and numerical) well models. It includes many tests and examples, including examples for Monte Carlo, sensitivity simulations to analyse uncertainties in reservoir properties, and well architectures</p>"},{"location":"theory/introduction/#approach","title":"Approach","text":"<p>The geothermal power which can be produced takes into account the production flow rate Q,  and the cooling of the produced brine in the heat conversion process:</p> <p>E = \ud835\udf02 Q C \u0394T</p> <p>where: </p> <ul> <li>E is the converted power [W]</li> <li>\ud835\udf02 is the conversion efficiency [-], which depends on the heat conversion system, band here is assumed to be 1</li> <li>Q is the flow rate of the produced brine [m\u00b3/s]</li> <li>C is the volumetric heat capacity of the brine or circulation fluid [J m\u207b\u00b3 K\u207b\u00b9]</li> <li>\u2206T is the temperature difference between the producer and injector at the topside at the heat exchanger [K]</li> </ul>"},{"location":"theory/introduction/#doublet-well-architectures","title":"Doublet well architectures","text":"<p>The well architecture can be defined in a flexible way, using the pywellresult package.</p>"},{"location":"theory/introduction/#doublet-flow-performance","title":"Doublet flow performance","text":"<p>Achievable flow rates  are calculated with the AEM model in pyfastwell. The AEM model calculates the well inflow performance based on the well architecture, reservoir properties, and fluid properties. The coldfront evolution in the reservoir is calculated based on a finite difference solution, taking into account the flow rate, reservoir properties, and thermal properties of the fluid. The AEM model  section provides more details on the AEM implementation in pyfastwell. and has been extensively benchmarked against semi-analytical and numerical models as described in the AEM benchmark section.</p>"},{"location":"theory/introduction/#doublet-coldfront-evolution","title":"Doublet  coldfront evolution","text":"<p>The coldfront evolution in the reservoir is calculated based on a finite difference solution, taking into account the flow rate, reservoir properties, and thermal properties of the fluid. the coldfront evolution is described in coldfront evolution.</p>"},{"location":"theory/introduction/#geothermal-resources","title":"Geothermal Resources","text":"<p>The geothermal resource is considered as a permeable subsurface layer,  which can be corresponding a permeable sedimentary rock or fractured basement or magmatic rock. The geothermal resource parameters  include reservoir depth, thickness, temperature, brine compositions, and reservoir flow properties such as permeability and porosity. </p>"},{"location":"theory/introduction/#economic-model","title":"Economic Model","text":"<ul> <li>The economic model performs a NPV and LCOE calculation, incorporating a discounted cash flow approach:</li> <li>CAPEX (Capital Expenditure) and OPEX (Operational Expenditure) are calculated based on the well design, reservoir properties</li> <li>The LCOE is calculated as the ratio of the total discounted cost to the total discounted energy produced over the lifetime of the geothermal system.</li> <li>The economic model allows for sensitivity analysis on key parameters such as reservoir properties, asscoiated flow rate,      and conversion efficiency.</li> </ul>"},{"location":"theory/introduction/#key-performance-indicators","title":"Key Performance indicators","text":"<ul> <li>key performance indicators: The key performance indicators (KPIs) are calculated based on the technical performance and economic model,    providing insights into the feasibility and profitability of geothermal projects. These include:</li> <li>net power  (power in MWth)</li> <li>Leveleized Cost of Energy (LCOE in  \u20acct/kWh)</li> <li>Net present value (NPV in million \u20ac)</li> </ul>"},{"location":"theory/introduction/#references","title":"References","text":"<ol> <li>Egberts, P., Shatyrbayeva, I., Fokker, P.A., 2013. Well inflow modelling for wells not aligned to a numerical grid. SPE 165986.</li> <li>Fokker, P. A., Verga, F., &amp; Egberts, P. J., 2005 New semianalytic technique to determine horizontal well productivity index in fractured reservoirs. SPE Reservoir Evaluation &amp; Engineering, 8(02), 123-131.</li> <li>Van Wees et al., 2012. Geothermal aquifer performance assessment for direct heat production\u2013Methodology and application to Rotliegend aquifers.\u202fNetherlands Journal of Geosciences,\u202f91(4), 651-665. https://doi.org/10.1017/S0016774600000433</li> <li>Mijnlieff, 2020. Introduction to the geothermal play and reservoir geology of the Netherlands. Netherlands Journal of Geosciences.https://doi.org/10.1017/njg.2020.2</li> </ol>"},{"location":"theory/kpiperformance/","title":"Key Performance indicators","text":"<p>Key Performance Indicators (KPIs) are essential metrics used to evaluate the performance of geothermal projects. In pyfastwell, KPIs are calculated based on the results of the DoubletCalc and economic model calculations.  The KPIs provide insights into the efficiency, profitability, and sustainability of geothermal energy projects.</p> <p>The KPI have been subdivided into the following categories:</p>"},{"location":"theory/kpiperformance/#technical-kpis","title":"technical KPIs","text":"<p>Reservoir and well performance indicators are calculated based on the results of the DoubletCalc calculation</p> <ul> <li>Reservoir Temperature [C]: The temperature of the geothermal fluid at the reservoir, which is crucial for determining the energy potential.</li> <li>Reservoir Depth [m]: The depth below surface of the top of the reservoir</li> <li>Thickness [m]: The thickness of the reservoir</li> <li>Net hydraulic Transmissivity [Dm]: A measure of the reservoir's ability to transmit fluids, expressed in Darcymeters (Dm).  It is calculated as the product of permeability and net thickness of the reservoir.</li> <li>Production Temperature [C]:  production temperature at the surface,  typically 1-2 degrees C temperature drop compared to Reservoir temperature</li> <li>Injection Temperature [C]: injection temperature at the surface r.</li> <li>Flow Rate [m3/h]: The rate at which geothermal fluid is produced from the reservoir.</li> <li>Pressure Drop [bar]: The pressure  required to drive the thermal loop. The doublet model takes into account hydraulic resistance of the reservoir, friction in tubing and thermosyphon effects.</li> <li>Power[MW]: Power production, which is the net power output of the geothermal plant after accounting for conversion efficiency and parasitic losses.</li> <li>COP[-]: The system Coefficient of Performance (COP),  which is the ratio of useful power provided to the energy consumed by the ESP and heat pump system.</li> </ul>"},{"location":"theory/kpiperformance/#economic-kpis","title":"economic KPIs","text":"<ul> <li>LCOE [\u20accts/kWh]: The Unit Technical Cost or socalled Levelized Cost of Energy, which is the average cost per unit of energy produced over the lifetime of the project,  expressed in euro cts per kilowatt-hour.</li> <li>NPV [million\u20ac]: The net present value of the project, which is the difference between  the present value of cash inflows and outflows over the project's lifetime. In pythermogis it is calculated as:</li> </ul>"},{"location":"theory/aemmodel/aem_benchmark/","title":"Analytical Element Method (AEM) model benchmark","text":"<p>The AEM implementation has been tested against doubletcalc1D, the analytical solution thiems for a doublet with vertical wells in a homogeneous reservoir (Van Wees et al., 2012).</p> <p>In addition, the AEM implementation has been benchmarked against analytical  solutions of for deviated wells in homogeneous reservoirs by: - Cinco et al. (1975) - Rogers and Economides (1996) - Besson (1990) </p> <p>and against the NLOG spreadsheet based on Egberts and Fokker (2001) for horizontal wells in homogeneous reservoirs.</p>"},{"location":"theory/aemmodel/aem_benchmark/#thiems-solution-for-multiple-wells-in-a-homogeneous-reservoir","title":"Thiem's solution for multiple wells in a homogeneous reservoir","text":"<p>The steady state pressure conditions at distance r from the well radius is given by Thiem\u2019s solution for an infinite aquifer:</p> <p>\\(p(r) = \\frac{\\mu q}{2 \\pi k H} ( \\ln\\left(\\frac{r}{r_w}\\right) + S)\\)  (eq. 1)</p> <p>The pressure differences can be superposed for N wells. For a doublet configuration, the system of equations reduces to the well-known steady state solution (e.g. Van Wees et al., 2012):</p> <p>\\(\\Delta p = \\frac{\\mu_i q}{ 2\\pi k H} ( \\ln\\left( \\frac{L}{r_i} \\right) + S_i) +  \\frac{\\mu_p q}{ 2 \\pi k H} ( \\ln\\left( \\frac{L}{r_p} \\right) + S_p)\\) (eq. 2)</p> <p>where </p> <p>\\(L\\) is the distance between the wells, \\(k\\) is the permeability of the reservoir, \\(H\\) is the thickness of the reservoir, \\(r_i\\) and \\(r_p\\) are the well radii of the injector and producer respectively.  \\(S_i\\) and \\(S_p\\) are the skin factors of the injector and producer respectively. \\(\\mu_i\\) and \\(\\mu_p\\) are the viscosities at the injector and producer respectively.</p> <p> FIGURE 1: Comparison of AEM model results with Thiem's solution and DoubletCalc1D for a doublet with vertical wells in a homogeneous reservoir with top reservoir at 2300 m depth and thickness of 100 m. Skins are set to 0. The viscosity is temperature and salinity dependent according to Van Wees et al. (2012). This figure can be reproduced with the corresponding unittest in test_benchmark_aem.py**</p>"},{"location":"theory/aemmodel/aem_benchmark/#deviated-wells-in-homogeneous-reservoirs","title":"Deviated wells in homogeneous reservoirs","text":"<p>In three dimensions we tested the a progressively inclined well, with deviations from vertical from 0 to 70 degrees. The center of the reservoir is at 2300 m depth, with a thickness of 100 m. the average distance between the perforated sections of the wells is maintained at 1300 m. For a well with 0 degrees deviation, the results are compared with Thiem's solution and DoubletCalc1D for a doublet with vertical wells in a homogeneous reservoir according to eq. 2. For increasing deviation from vertical, the AEM results are backbalculated to equivalent skin to a vertical which are required to obtain the same PI and II as the AEM results. they are compared to the analytical solutions from Cinco et al. (1975), Rogers and Economides (1996), and Besson (1990).</p> <p> FIGURE 2: Comparison of AEM model results for varying deviations for khkv=1 (Horizontal to vertical permeability ratio). For 0 degrees results are compared with Thiem's solution and DoubletCalc1D for a doublet with vertical wells in a homogeneous reservoir according to eq. 2. Well Skins are set to 0. The viscosity is temperature and salinity dependent according to Van Wees et al. (2012). For increasing deviation from vertical,  the AEM results are compared with the analytical solutions described in the paragraph. This figure can be reproduced with the corresponding unittest in test_benchmark_aem.py</p> <p> FIGURE 3: Comparison of AEM model results for varying deviations for khkv=3 (Horizontal to vertical permeability ratio)</p> <p> FIGURE 4: Comparison of AEM model results for varying deviations for khkv=5 (Horizontal to vertical permeability ratio)</p> <p> FIGURE 5: Comparison of AEM model results for varying deviations for khkv=10 (Horizontal to vertical permeability ratio)</p>"},{"location":"theory/aemmodel/aem_benchmark/#horizontal-wells-in-homogeneous-reservoirs","title":"horizontal wells in homogeneous reservoirs","text":"<p>For horizontal wells, relations are used that are based on the 3D-2D transition method that was developed by Egberts and Fokker (2001)., and available as spreadsheet tool at nlog.  Possible permeability anisotropy is taken into account in this expression.We focus the comparison of the pressure on the injection well. The general input parameters our simulations are a viscosity of 0.817 mPa.s; an injection rate of 400 m3/hr;  a horizontal permeability of 100 md; a well radius of 0.1 m and an aquifer thickness of 100 m at a depth between 2300 and 2400 m.  In a first sensitivity exercise, we position two parallel horizontal wells at a distance of 1000 m. The length of the two wells is varied between 50 and 2000 m.  We made a comparison between the two tools for a vertical permeability of 100 md (isotropic case) and 10 md (anisotropic case with kv/kh=0.1).  We provide both the pressure difference between fluid in the well and the far-field aquifer pressure, and the skin. The apparent skin resulting from the pyfastwell calculations  is determined by adjusting it so the analytical equation for a vertical well doublet with skin equals the pyfastwell output. Figure 6 gives the results of the comparisons.  We see that the approximation breaks down for well lengths equal to or longer than the distance between injection and production well \u2013 1000 m in this case. Below that value, the agreement is excellent. </p> <p> FIGURE 6: Comparison of AEM model results for horizontal wells for varying lengths for khkv=1  (Horizontal to vertical permeability ratio).  Comparison of calculations with effective skin based on the NLOG spreadsheet (Egberts and Fokker, 2001) (symbols and dashed lines) and Analytic Elements calculations (symbols and full lines).</p> <p> FIGURE 7: Comparison of AEM model results for horizontal wells for varying lengths for khkv=10  (Horizontal to vertical permeability ratio).  Comparison of calculations with effective skin based on the NLOG spreadsheet (Egberts and Fokker, 2001) (symbols and dashed lines) and Analytic Elements calculations (symbols and full lines).</p>"},{"location":"theory/aemmodel/aem_benchmark/#equivalent-skin-for-doubletcalc1d","title":"equivalent Skin for Doubletcalc1D","text":"<p>The resulting PI and II can be compared to a reference simple well layout (i.e. vertical, not laterals, following cf. DoubletCalc). To this end the Wellfastmodel can be used to calculate the equivalent skin factor for a vertical well which would give the same PI and II as the AEM model. see the examples in the examples folder.</p>"},{"location":"theory/aemmodel/aem_benchmark/#references","title":"References","text":"<ol> <li>Fokker, P. A., Verga, F., &amp; Egberts, P. J., 2005 New semianalytic technique to determine horizontal well productivity index in fractured reservoirs. SPE Reservoir Evaluation &amp; Engineering, 8(02), 123-131.</li> <li>Egberts, P., Shatyrbayeva, I., Fokker, P.A., 2013. Well inflow modelling for wells not aligned to a numerical grid. SPE 165986.</li> <li>Egberts, P. J. P., &amp; Fokker, P. A., 2001. A new analytical approximation for the flow into a well in a finite reservoir. Transport in porous media, 44(1), 85-107.</li> <li>Van Wees, J. D., Kronimus, A., Van Putten, M., Pluymaekers, M., Mijnlieff, H., Van Hooff, P., Obdam, A., &amp; Kramers, L., 2012. Geothermal aquifer performance assessment  for direct heat production\u2013Methodology and application to Rotliegend aquifers. Netherlands Journal of Geosciences 91 (04): 651-665.</li> <li>CH. Cinco, F.G. Miller, H.J. Ramey Jr., 1975. Unsteady-state pressure distribution created by a directionally drilled well. J. Petrol. Technol., 27 (11) (1975), pp. 1-392</li> <li>E.J. Rogers, M.J. Economides, 1996.  The skin due to slant of deviated wells in permeability-anisotropic reservoirs International Conference on Horizontal Well Technology, Society of Petroleum Engineers</li> <li>Besson H., 1990. Performance of slanted and horizontal wells on an anisotropic medium. European Petroleum Conference, Society of Petroleum Engineers (1990)</li> </ol>"},{"location":"theory/aemmodel/aem_model/","title":"Analytical Element Method (AEM) model for geothermal reservoir simulation","text":"<p>The well productivity and injectivity is modelled by a semi-analytical model approach  based on the Analytical Element Model (AEM) developed by Fokker et al., (2005) and Egberts et al. (2013).  The model has been modified for geothermal wells, assuming a mass balance between produced and injected brines.  The mass balance and pressure difference between the injector and producer results in a set of equations  which is one row and column larger than the number of well segments involved in the  Analytical element solution proposed. In the AEM models described here we assume a  laterally infinite aquifer of constant thickness and homogeneous (but possibly anisotropic) permeability.  In order to explain the AEM approach and in order compare/benchmark the 3 dimensional results with analytical solutions (i.e. Van Wees et al., 2012, DoubletCalc1D), we first introduce the AEM for the two-dimensional case and later extend to three dimensions.</p>"},{"location":"theory/aemmodel/aem_model/#two-dimensional-solution","title":"Two-Dimensional Solution","text":"<p>The steady state pressure conditions at distance r from the well radius is given by Thiem\u2019s solution for an infinite aquifer:</p> \\[p(r) = \\frac{\\mu q}{2 \\pi k H} ( \\ln\\left(\\frac{r}{r_w}\\right) + S)\\] <p>The pressure differences can be superposed for N wells. When choosing a very large reference radius , we can write the superposing effects of pressure for a well i with additional surrounding wells j as:</p> \\[P_i = \\frac{\\mu}{2 \\pi k H} \\left( \\ln\\left( \\frac{r_e}{r_{w_i}} \\right) q_i + \\sum_{\\substack{j=1 \\\\ j \\ne i}}^{N} \\ln\\left( \\frac{r_e}{L_j} \\right) q_j \\right)\\] <p>\\(r_wi\\) is the radius of the well completion, and  \\(L_j\\) is distance of well j to the well i. As the sum of flow rates is zero, this can be simplified to:</p> \\[ P_i = \\frac{\\mu}{2 \\pi k H} \\left( \\sum_{j=1}^{N} \\ln(r_e) q_j + \\ln\\left(\\frac{1}{r_{w_i}}\\right) q_i + \\sum_{\\substack{j=1 \\\\\\\\ j \\ne i}}^{N} \\ln\\left(\\frac{1}{L_j}\\right) q_j \\right) \\] <p>=</p> \\[ P_i = \\frac{\\mu}{2 \\pi k H} \\left( \\ln\\left(\\frac{1}{r_{w_i}}\\right) q_i + \\sum_{\\substack{j=1 \\\\ j \\ne i}}^{N} \\ln\\left(\\frac{1}{L_j}\\right) q_j \\right) \\] <p>Consequently, we can write for the system of equation to solve:</p> \\[ \\begin{bmatrix} I_{i=1}(r_{w_i}) &amp; I_{i=1}(L_1) &amp; \\cdots &amp; I_{i=1}(L_N) &amp; D_1 \\\\ I_{i=2}(L_1) &amp; I_{i=2}(r_{w_i}) &amp; \\cdots &amp; I_{i=2}(L_N) &amp; D_2 \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots &amp; \\vdots \\\\ I_N(L_1) &amp; I_N(r_{w_N}) &amp; \\cdots &amp; I_N(L_N) &amp; D_N \\\\ 1 &amp; 1 &amp; \\cdots &amp; 1 &amp; 0 \\end{bmatrix} \\begin{bmatrix} q_1 \\\\ q_2 \\\\ \\vdots \\\\ q_N \\\\ P_p \\end{bmatrix} = \\begin{bmatrix} P_1 \\\\ P_2 \\\\ \\vdots \\\\ P_N \\\\ 0 \\end{bmatrix} \\] <pre><code>(eq. 4)\n</code></pre> <p>with</p> \\[ I_i(r) = A \\mu_i \\left( \\ln\\left( \\frac{1}{r} \\right) + S_i \\right), \\quad A = \\frac{1}{2 \\pi k H} \\] <p>where mu_i is viscosity at well i and is the well radius or the distance between the wells i and j</p> <p>\\(D_i\\): 0 when the well is injector, -1 when producer</p> <p>\\(P_i\\): reference injection pressure (i.e. 1 bar) when the well is injector, 0 when producer.</p> <p>Results from solving the system of equations become:</p> <p>\\(q_i\\): flow rate for the wells, which can be used to determine injectivity index  [q_i/P_i] and productivity index in [-q_i/P_i],  dependent of the sign of .</p> <p>\\(P_p\\): resulting production pressure to maintain the steady state mass balance.</p> <p>For a doublet configuration, the system of equations reduces to the well-known steady state solution (e.g. Van Wees et al., 2012):</p> \\[\\Delta p = \\frac{\\mu q}{ \\pi k H} ( \\ln\\left( \\frac{L}{r_w} \\right) + S)\\] <p>Please note that the viscosity is constant for each row of the equations(cf. eq. 3). In order to include the effects of the viscosity contrasts, the viscosity for each row is set to the viscosity around the well under consideration.</p>"},{"location":"theory/aemmodel/aem_model/#three-dimensional-solution","title":"Three-Dimensional Solution","text":"<p>In three dimensions the system of equations is setup for N well line segments instead of N wells.  The structure of the system of equations remains the same,  and the system of equations and solution approach (excluding the last row and column)  is explained in detail in the annex of Egberts et al. (2013).  The M submatrix is a summation over line segment contribution of injectors and producers (k = 0)  and and multiple images below the base and above the top of the reservoir, marked by the indices k = -1 and k = 1.  These image contributions enforce no flow boundary conditions at the top and base of the reservoir.  The i and j denote pairs of control point location for each of the line segments (chosen at the middle) and is at least \\(r_w\\) away from the well bore segment i.</p> \\[M_{ij} = \\sum_{k=-1}^{1} \\frac{\\mu_i}{2 \\pi k H} (\\ln\\left( \\frac{1}{r_{ijk}} +S_i) \\right)\\] <p>Such that the full system of equations becomes:</p> \\[ \\begin{bmatrix} M_{ij} &amp; \\cdots &amp; D_1 \\\\\\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\\\\\ M_{ij} &amp; \\cdots &amp; D_N \\\\\\\\ 1 &amp; \\cdots &amp; 0 \\end{bmatrix} \\begin{bmatrix} q_1 \\\\\\\\ q_2 \\\\\\\\ \\vdots \\\\\\\\ q_N \\\\\\\\ P_p \\end{bmatrix} = \\begin{bmatrix} P_1 \\\\\\\\ P_2 \\\\\\\\ \\vdots \\\\\\\\ P_N \\\\\\\\ 0 \\end{bmatrix} \\] <p>The method of Egberts et al. (2013) allows to incorporate an anisotropic permeability field. In addition additional images are included to enforce spatial constrains in flow (i.e. no flow barriers).  The AEM also allows to be extended to incorporate frictional losses in the right hand side based on the solution for . This requires an iterative solution and needs to model the exact well segment pressure. Please note that the solution is in 3D is based a single reference  well pressure  and  relative to the ambient pressure, and neglects potential vertical variation in pressure in the well bore compared to the ambient reservoir pressure. This is considered a valid  assumption for geothermal reservoirs.</p>"},{"location":"theory/aemmodel/aem_model/#benchmark","title":"Benchmark","text":"<p>The outcomes of the AEM model have been benchmarked for deviated and horizontal wells against  analytical models including Doubletcalc1D in AEM benchmark</p>"},{"location":"theory/aemmodel/aem_model/#using-and-comparing-results-in-doubletcalc1d","title":"Using and comparing results in Doubletcalc1D","text":"<p>The AEM implementation in pyfastwell adopts the geothermal gradeint and  brine viscosity formulation as adopted  in  DoubletCalc1D, adopting Batzle and Wang viscosity</p> <p>pyfastwell contains a function to calculate the equivalent Skins for the injector and  producer wells in DoubletCalc1D. These have been validated in the AEM benchmark</p>"},{"location":"theory/aemmodel/aem_model/#references","title":"References","text":"<ol> <li>Fokker, P. A., Verga, F., &amp; Egberts, P. J., 2005 New semianalytic technique to determine horizontal well productivity index in fractured reservoirs. SPE Reservoir Evaluation &amp; Engineering, 8(02), 123-131.</li> <li>Egberts, P., Shatyrbayeva, I., Fokker, P.A., 2013. Well inflow modelling for wells not aligned to a numerical grid. SPE 165986.</li> <li>Van Wees, J. D., Kronimus, A., Van Putten, M., Pluymaekers, M., Mijnlieff, H., Van Hooff, P., Obdam, A., &amp; Kramers, L., 2012. Geothermal aquifer performance assessment  for direct heat production\u2013Methodology and application to Rotliegend aquifers. Netherlands Journal of Geosciences 91 (04): 651-665.</li> </ol>"},{"location":"usage/introduction/","title":"Using pyfastwell for geothermal doublet performance assessment","text":""},{"location":"usage/introduction/#steps-to-perform-a-geothermal-doublet-performance-assessment","title":"steps to perform a geothermal doublet performance assessment","text":"<p>The following steps are typically involved in performing a geothermal doublet performance assessment using pyfastwell:</p> <ol> <li>Define the well architecture: Create a well trajectory file that describes the geometry and layout of the injection and production wells. This file should be in accordance with the supported well types in <code>pywellgeo</code>.</li> <li>Define simulation parameters: Create a setting file that contains the simulation parameters, including reservoir properties, fluid properties, and economic parameters. This file should be in YAML format.</li> <li>Initialize the economics instance and fastmodel: Use the <code>GeothermalEconomics</code> class from <code>pythermonomics</code> to initialize the economic model based on the setting file and well trajectory file. Then, create an instance of the <code>WellFastModel</code> class from <code>pyfastwell</code>, providing the economics instance and reservoir properties.</li> <li>Set operational parameters such as BHP and compute results: Set the bottom hole pressure (BHP) for the wells and compute the economic performance using the <code>compute_economics</code> method of the <code>WellFastModel</code> instance.</li> <li>compute performance and analyze results</li> </ol>"},{"location":"usage/introduction/#required-input-files","title":"required input files","text":"<ul> <li>define the well architecture with a well trajectory file  in accordance to supported well types <code>pywellgeo</code> </li> <li>define the simulation parameters in a setting file</li> </ul>"},{"location":"usage/introduction/#defining-simulation-parameters-with-a-settingfile","title":"defining-simulation-parameters-with-a-settingfile","text":"<p>The settingfile is a yaml file which contains the simulation parameters, except for the well architecture, which is defined in the trajectoryfile. An example of a settingfile is shown below. More explenation of the parameters can be found in the pythermonomics documentation The reservoir_simulation_parameters production_temperature, injection_BHP, production_BHP and flow rate can be modified later in the WellFastmodel class.</p> <p>The well_trajectories section is ignored by pyfastwell, but is required to parse the file with pythermonomics.</p> <pre><code>energy_loss_parameters:\n  well_roughness: 1.38\n  well_tubing: 7\n  useheatloss: true\n  tsurface: 10.0\n  tgrad: 0.031\n\nreservoir_simulation_parameters:\n  injection_temperature: 50\n  production_temperature: 90\n  injection_BHP: 260\n  production_BHP: 200\n  flowrate: 400\n  salinity: 140000\n\ntechno_economic_parameters:\n  loadhours: 6000\n  wellcost_scaling: 1.5\n  wellcost_base: 250000\n  well_curvfac: 1.0\n  wellcost_linear: 700\n  wellcost_cube: 0.2\n  pump_efficiency: 0.6\n  pump_cost: 500000\n  pump_life: 5\n  CAPEX_base: 3000000\n  CAPEX_variable: 300\n  CAPEX_contingency: 0.15\n  OPEX_base: 0\n  OPEX_variable: 100\n  OPEX_variable_produced: 0.19\n  equity_share: 0.2\n  loan_nyear: 15\n  loan_rate: 0.05\n  discount_rate: 0.145\n  inflation_rate: 0.015\n  tax_rate: 0.25\n  tax_depreciation_nyear: 15\n  heat_price: 5.1\n  heat_price_feedin: 5.1\n  electricity_price: 8\n  lifecycle_years: 15\n  subsidy_years: 15\n\nwell_trajectories:\n  INJ1:\n    platform: [0, 0, 0.0]\n    kick_off: [0, 0, 800.0]\n    targets: [[800, 500, 2300], [1800, 500, 2400]]\n  PRD1:\n    platform: [0, 0, 0.0]\n    kick_off: [0, 0, 800.0]\n    targets: [[800, -500, 2300], [1800, -500, 2400]]\n</code></pre>"},{"location":"usage/introduction/#initializing-the-economics-instance-and-fastmodel","title":"initializing the economics instance and fastmodel","text":"<pre><code>import pyfastwell as pwf\nfrom pythermonomics.geothermal_economics import GeothermalEconomics\nsettingfile = \"path/to/your/settingfile.yml\"\ntrajectoryfile = \"path/to/your/welltrajectoryfile.yml\"\neconomics = GeothermalEconomics.from_trajectory(settingfile, trajectoryfile)\nfastmodel = pwf.WellFastModel(economics, k=100, khkv=1, segmentlength=50, verbose=False)\n</code></pre> <p>The k (permeability in mDarcy) and khkv (horizontal to Vertical permeability Ratio) parameters define the reservoir properties, and can be modified later. The segmentlength parameter defines the discretization of the well trajectory in the AEM. smaller numbers result in significantly more computational time, but more accurate results. A value of 50 m is a good compromise between accuracy and speed for most well trajectories.</p> <p>The verbose parameter can be set to True to get more detailed output during the calculations.</p> <p>The trajectoryfile can be two formats : \"DETAILEDTNO\" or \"XYZGENERIC\", see the well trajectory documentation for more information.</p> <p>If its format is \"DC1DWELL\", you should use another constructor for the economics instance: <pre><code>from pywellgeo.well_data.dc1dwell import *\ndc1dwell = Dc1dwell.from_configfile(dc1dsettings)\ndc1dwell.qvol =   -125/3600\ndc1dwell.dp = 30\ndc1dwell.calculateDP_qvol()\neconomics = GeothermalEconomics.from_dc1d(settingfile, dc1dsettings, dc1dwell)\n</code></pre> This sets the qvol in accordance to the dp. If qvol is set positive, it will use the flowrate to calculate the dp.</p>"},{"location":"usage/introduction/#setting-bhp-and-computation","title":"setting BHP and  computation","text":"<pre><code>fastmodel.set_dP_BHP(60)\nnpv, lcoe_val, cashflow, simdata, wells, well_results, cop, power, Tsurface, DT_eff, DP_eff = fastmodel.compute_economics()\nprint(f\"NPV {npv}, LCOE {lcoe_val}, COP {cop}, Power {power} MW, Treservoir {fastmodel.production_temperature} C, Tsurface {Tsurface} C, DT_eff {DT_eff} C, DP_eff {DP_eff} bar\")\nprint(f\"Well cost {cashflow['wellcosts'].iloc[0]/1e6} MEUR\")\n</code></pre>"},{"location":"usage/introduction/#plotting-trajectories","title":"plotting trajectories","text":"<p>for visualization purposes, the well trajectories can be plotted in 3D and in plan view:</p> <pre><code>fastmodel.plot_trajectories()\n</code></pre> <p>For the trajectory file corresponding to a multilateral well with 3 legs for both injector and horizontal producer as shows defined  </p>"},{"location":"usage/introduction/#calculating-and-plotting-the-coldfront","title":"calculating and plotting the coldfront","text":"<p>The coldfront can be calculated and plotted with the following code:</p> <pre><code>fastmodel.run_coldfront(simyears=30, rockdens=2700.0, rockcap=1000.0, porosity=0.21)\nfastmodel.plot_coldfront()\n</code></pre> <p>The figure generated by the above code will look like this: </p>"},{"location":"usage/introduction/#calculating-the-equivalent-skin-factor-for-doubletcalc1d","title":"calculating the equivalent skin factor for Doubletcalc1D","text":"<p>The equivalent skin factor for Doubletcalc1D can be calculated with the following code:</p> <pre><code>L= 1300\ndia_inch = 8\nrw = dia_inch * 0.0254  * 0.5\nskin_inj, skin_prd, ratio = fastmodel.getSkinFactors_dc1d(L, rw)\nprint(f\"for use in DC1D with L ={L} [m]  and diameter={dia_inch} [inch] Skin factors: inj {skin_inj}, prd {skin_prd}, ratio {ratio}\")\n</code></pre>"},{"location":"usage/welltrajectory/","title":"Pywellgeo well trajectory files","text":""},{"location":"usage/welltrajectory/#_1","title":"================================","text":"<p>There are three formats for well trajectory files that can be used in the from_trajectory constructor in for the formats: \"XYZGENERIC\" and  \"DETAILEDTNO\"</p>"},{"location":"usage/welltrajectory/#xyzgeneric-format","title":"XYZGENERIC format","text":"<p>trajectory file as shown below (corresponding to a multilateral well with 3 legs for the injector and a horizontal producer):</p> <p><pre><code>format: \"XYZGENERIC\"\n\nreservoir:\n    basic:\n        top_reservoir_depth_TVD: 2300.0 # m TVD\n        bottom_reservoir_depth_TVD: 2400  # m TVD\n\n\nwell_trajectories:\n  INJ1:\n    main_wellbore:\n     xyz: [ [0, 0, 0.0], [0, 0, 800.0],[800, 500, 2300], [1000,500,2400] ]\n     radius: 0.1\n     mindist: 25\n    branch1:\n     xyz: [ [800, 500, 2300], [1000,600,2400] ]\n     radius: 0.1\n     mindist: 25\n    branch2:\n      xyz: [ [ 800, 500, 2300 ], [ 1000,400,2400 ] ]\n      radius: 0.1\n      mindist: 25\n  PRD1:\n    main_wellbore:\n     xyz: [ [0, 0, 0.0], [0, 0, 800.0], [500, -500, 2300], [1500,-500,2400] ]\n     radius: 0.1\n     mindist: 25\n</code></pre> </p>"},{"location":"usage/welltrajectory/#detailedtno-format","title":"DETAILEDTNO format","text":"<p>trajectory file as shown below (corresponding to a multilateral well with 3 legs for both injector and producer):</p> <pre><code>format: \"DETAILEDTNO\"\n\nreservoir:\n    basic:\n        top_reservoir_depth_TVD: 2300 # m TVD\n        bottom_reservoir_depth_TVD: 2400  # m TVD\n\n\nwell_trajectories:\n    INJ1:\n        main_wellbore:\n          name: well1\n          wellhead:\n              x: 0\n              y: 0\n          BUR: 6.0 # deg/30m\n          radius: 0.1\n          subs:\n            sub1:\n                x: 300 # for x,y omission will take old x,y\n                y: 0 # (-TVD)  to be reac\n                z: -2200\n                azim: 90.0\n                dip: 40.0\n            sub2:\n              dx: 190 # for x,y omission will take old x,y\n              y: 0 # (-TVD)  to be reac\n              z: -2300\n            sub3:\n               L: 300\n        branch1:\n          startsub: sub1 # reference to a node in main_wellbore\n          subs:\n            subl1:\n              dx: 170  # for x,y omission will take old x,y\n              dy: 60  # (-TVD)  to be reac\n              z: -2300\n            subl2:\n              L: 300\n        branch2:\n          startsub: sub1 # reference to a node in main_wellbore\n          subs:\n            subl3:\n              dx: 170  # for x,y omission will take old x,y\n              dy: -60  # (-TVD)  to be reac\n              z: -2300\n              #azim: 100\n            subl4:\n              L: 300\n\n\n    PRD1:\n        main_wellbore:\n          name: well2\n          wellhead:\n              x: 0\n              y: 0\n          BUR: 6.0 # deg/30m\n          radius: 0.1\n          subs:\n            sub1:\n                x: -300 # for x,y omission will take old x,y\n                y: 0 # (-TVD)  to be reac\n                z: -2200\n                azim: 270.0\n                dip: 40.0\n            sub2:\n              dx: -190 # for x,y omission will take old x,y\n              y: 0 # (-TVD)  to be reac\n              z: -2300\n            sub3:\n               L: 300\n        branch1:\n          startsub: sub1 # reference to a node in main_wellbore\n          subs:\n            subl1:\n              dx: -170  # for x,y omission will take old x,y\n              dy: 60  # (-TVD)  to be reac\n              z: -2300\n            subl2:\n              L: 300\n        branch2:\n          startsub: sub1 # reference to a node in main_wellbore\n          subs:\n            subl3:\n              dx: -170  # for x,y omission will take old x,y\n              dy: -60  # (-TVD)  to be reac\n              z: -2300\n              #azim: 100\n            subl4:\n              L: 300\n</code></pre> <p>The figures generated by the above code will look like this:  </p>"}]}